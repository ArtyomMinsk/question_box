# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2016-08-16 23:15
from __future__ import unicode_literals
from django.db import migrations
from django.contrib.auth import get_user_model

import csv


def load_data(apps, schema_editor):
    Question = apps.get_model('slack_app', 'Question')
    # Answer = apps.get_model('slack_app', 'Answer')
    # Comment = apps.get_model('slack_app', 'Comment')
    # User = get_user_model()
    #
    # sample_users = [('T.Robert', 'trob@nasa.gov', 'password'),
    #                 ('Art', 'forward@Arsenal.com', 'password'),
    #                 ('Richard', 'mil@python.web', 'password'),
    #                 ('Andrew', 'pulp@fiction.com', 'password'),
    #                 ('jack', 'abc@django.edu', 'password'),
    #                 ]
    #
    # for person in sample_users:
    #     User.objects.create_user(username=person[0], email=person[1], password=person[2])

    with open('questions.txt') as questions:
        reader = csv.reader(questions, delimiter='+')
        tempid = 0
        for row in reader:
            tempid += 1
            temp_question = Question(id=tempid, title=row[0], description=row[1], tags=row[2], user_id=row[3])
            temp_question.save()
            # temp_question.users.add(int(row[3]))
            # temp_question.save()
        print("##########################  Q   #########################")

    # with open('answers.txt') as answers:
    #     reader = csv.reader(answers, delimiter='+')
    #     for row in reader:
    #         temp_answer = Answer(answer_text=row[0], question_id=int(row[1]), user_up_vote=int(row[2]), user_down_vote=int(row[3]), user_id=row[4])
    #         temp_answer.save()
    #         # temp_answer.users.add(int(row[4]))
    #         # temp_answer.save()
    #     print("##########################  A   #########################")
    #
    # with open('comments.txt') as comments:
    #     reader = csv.reader(comments, delimiter='+')
    #     for row in reader:
    #         temp_comments = Comment(comment_text=row[0], answer_id=row[1], user_id=row[2])
    #         temp_comments.save()
    #         # temp_comments.users.add(user=int(row[2]))
    #         # temp_comments.save()
    #     print("##########################  C   #########################")


class Migration(migrations.Migration):

    dependencies = [
        ('slack_app', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_data)
    ]
